@page "/notifications/delete"
@using Microsoft.EntityFrameworkCore
@using DatingAppFSDProject.Domain
@inject IDbContextFactory<DatingApp.Data.DatingAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Notification</h2>
    <hr />
    @if (notification is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Content</dt>
            <dd class="col-sm-10">@notification.Content</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsRead</dt>
            <dd class="col-sm-10">@notification.IsRead</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TimeRecived</dt>
            <dd class="col-sm-10">@notification.TimeRecived</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserId</dt>
            <dd class="col-sm-10">@notification.UserId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">MessageId</dt>
            <dd class="col-sm-10">@notification.MessageId</dd>
        </dl>
        <EditForm method="post" Model="notification" OnValidSubmit="DeleteNotification" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(notification is null)">Delete</button> |
            <a href="/notifications">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Notification? notification;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        notification = await context.Notification.FirstOrDefaultAsync(m => m.Id == Id);

        if (notification is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteNotification()
    {
        using var context = DbFactory.CreateDbContext();
        context.Notification.Remove(notification!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/notifications");
    }
}
